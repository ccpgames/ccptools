import unittest
import types
from ccptools.legacyapi.typeutils import strimp


class InspTests(unittest.TestCase):
    def test_get_any(self):
        class_type = type
        type_type = type

        self.assertIsInstance(strimp.get_any('tests.typeutils.sometypes.IamModule'), types.ModuleType)
        self.assertIsInstance(strimp.get_any('tests.typeutils.sometypes.IamOtherModule'), types.ModuleType)
        self.assertIsInstance(strimp.get_any('tests.typeutils.sometypes.IamType'), class_type)
        self.assertIsInstance(strimp.get_any('tests.typeutils.sometypes.IamClass'), type_type)
        self.assertIsInstance(strimp.get_any('tests.typeutils.sometypes.IamCallableClass'), type_type)
        self.assertIsInstance(strimp.get_any('tests.typeutils.sometypes.IamInstance'), object)
        self.assertIsInstance(strimp.get_any('tests.typeutils.sometypes.IamObject'), object)
        self.assertIsInstance(strimp.get_any('tests.typeutils.sometypes.IamCallableObject'), object)
        self.assertIsInstance(strimp.get_any('tests.typeutils.sometypes.IamModuleConst'), str)
        self.assertIsInstance(strimp.get_any('tests.typeutils.sometypes.IamLambda'), types.LambdaType)
        self.assertIsInstance(strimp.get_any('tests.typeutils.sometypes.IamFunction'), types.FunctionType)
        self.assertIsInstance(strimp.get_any('tests.typeutils.sometypes.IamEmptyFunction'), types.FunctionType)
        self.assertIsInstance(strimp.get_any('tests.typeutils.sometypes.IamArgsFunction'), types.FunctionType)
        self.assertIsInstance(strimp.get_any('tests.typeutils.sometypes.IamKwArgsFunction'), types.FunctionType)
        self.assertIsInstance(strimp.get_any('tests.typeutils.sometypes.IamStaticMethFromType'), types.FunctionType)
        self.assertIsInstance(strimp.get_any('tests.typeutils.sometypes.IamClassMethFromType'), types.MethodType)

        self.assertIsInstance(strimp.get_any('tests.typeutils.sometypes.IamMethFromType'), types.FunctionType)
        self.assertIsInstance(strimp.get_any('tests.typeutils.sometypes.IamMethFromClass'), types.FunctionType)

        self.assertIsInstance(strimp.get_any('tests.typeutils.sometypes.IamStaticMethFromClass'), types.FunctionType)
        self.assertIsInstance(strimp.get_any('tests.typeutils.sometypes.IamClassMethFromClass'), types.MethodType)

    def test_get_any_bad(self):
        self.assertNotIsInstance(strimp.get_any('tests.typeutils.sometypes.IamModule'), str)
        self.assertNotIsInstance(strimp.get_any('tests.typeutils.sometypes.IamModuleConst'), type)
        self.assertIsInstance(strimp.get_any('tests.typeutils.sometypes.IamNoType', 1), int)
        self.assertIsInstance(strimp.get_any('tests.typeutils.sometypes.IamClass2'), type(None))

    def test_get_any_equal(self):
        from tests.typeutils import sometypes
        self.assertEqual(strimp.get_any('tests.typeutils.sometypes.IamModule'), sometypes.IamModule)
        self.assertEqual(strimp.get_any('tests.typeutils.sometypes.IamModuleConst'), sometypes.IamModuleConst)
        self.assertEqual(strimp.get_any('tests.typeutils.sometypes.IamType'), sometypes.IamType)
        self.assertEqual(strimp.get_any('tests.typeutils.sometypes.IamClass'), sometypes.IamClass)
        self.assertEqual(strimp.get_any('tests.typeutils.sometypes.IamCallableClass'), sometypes.IamCallableClass)
        self.assertEqual(strimp.get_any('tests.typeutils.sometypes.IamInstance'), sometypes.IamInstance)
        self.assertEqual(strimp.get_any('tests.typeutils.sometypes.IamObject'), sometypes.IamObject)
        self.assertEqual(strimp.get_any('tests.typeutils.sometypes.IamCallableObject'), sometypes.IamCallableObject)
        self.assertEqual(strimp.get_any('tests.typeutils.sometypes.IamLambda'), sometypes.IamLambda)
        self.assertEqual(strimp.get_any('tests.typeutils.sometypes.IamFunction'), sometypes.IamFunction)
        self.assertEqual(strimp.get_any('tests.typeutils.sometypes.IamEmptyFunction'), sometypes.IamEmptyFunction)
        self.assertEqual(strimp.get_any('tests.typeutils.sometypes.IamArgsFunction'), sometypes.IamArgsFunction)
        self.assertEqual(strimp.get_any('tests.typeutils.sometypes.IamKwArgsFunction'), sometypes.IamKwArgsFunction)
        self.assertEqual(strimp.get_any('tests.typeutils.sometypes.IamStaticMethFromType'), sometypes.IamStaticMethFromType)
        self.assertEqual(strimp.get_any('tests.typeutils.sometypes.IamClassMethFromType'), sometypes.IamClassMethFromType)
        self.assertEqual(strimp.get_any('tests.typeutils.sometypes.IamMethFromType'), sometypes.IamMethFromType)
        self.assertEqual(strimp.get_any('tests.typeutils.sometypes.IamStaticMethFromClass'), sometypes.IamStaticMethFromClass)
        self.assertEqual(strimp.get_any('tests.typeutils.sometypes.IamClassMethFromClass'), sometypes.IamClassMethFromClass)
        self.assertEqual(strimp.get_any('tests.typeutils.sometypes.IamMethFromClass'), sometypes.IamMethFromClass)

    def test_get_module(self):
        self.assertIsInstance(strimp.get_module('tests.typeutils.sometypes.IamModule'), types.ModuleType)
        self.assertIsInstance(strimp.get_module('tests.typeutils.sometypes.IamOtherModule'), types.ModuleType)
        self.assertNotIsInstance(strimp.get_module('tests.typeutils.sometypes.IamModuleConst'), types.ModuleType)
        self.assertNotIsInstance(strimp.get_module('tests.typeutils.sometypes.IamType'), types.ModuleType)
        self.assertNotIsInstance(strimp.get_module('tests.typeutils.sometypes.IamClass'), types.ModuleType)
        self.assertNotIsInstance(strimp.get_module('tests.typeutils.sometypes.IamCallableClass'), types.ModuleType)
        self.assertNotIsInstance(strimp.get_module('tests.typeutils.sometypes.IamInstance'), types.ModuleType)
        self.assertNotIsInstance(strimp.get_module('tests.typeutils.sometypes.IamObject'), types.ModuleType)
        self.assertNotIsInstance(strimp.get_module('tests.typeutils.sometypes.IamCallableObject'), types.ModuleType)
        self.assertNotIsInstance(strimp.get_module('tests.typeutils.sometypes.IamLambda'), types.ModuleType)
        self.assertNotIsInstance(strimp.get_module('tests.typeutils.sometypes.IamFunction'), types.ModuleType)
        self.assertNotIsInstance(strimp.get_module('tests.typeutils.sometypes.IamEmptyFunction'), types.ModuleType)
        self.assertNotIsInstance(strimp.get_module('tests.typeutils.sometypes.IamArgsFunction'), types.ModuleType)
        self.assertNotIsInstance(strimp.get_module('tests.typeutils.sometypes.IamKwArgsFunction'), types.ModuleType)
        self.assertNotIsInstance(strimp.get_module('tests.typeutils.sometypes.IamStaticMethFromType'), types.ModuleType)
        self.assertNotIsInstance(strimp.get_module('tests.typeutils.sometypes.IamClassMethFromType'), types.ModuleType)
        self.assertNotIsInstance(strimp.get_module('tests.typeutils.sometypes.IamMethFromType'), types.ModuleType)
        self.assertNotIsInstance(strimp.get_module('tests.typeutils.sometypes.IamStaticMethFromClass'), types.ModuleType)
        self.assertNotIsInstance(strimp.get_module('tests.typeutils.sometypes.IamClassMethFromClass'), types.ModuleType)
        self.assertNotIsInstance(strimp.get_module('tests.typeutils.sometypes.IamMethFromClass'), types.ModuleType)

    def test_get_class(self):
        type_tuple = (type,)
        self.assertNotIsInstance(strimp.get_class('tests.typeutils.sometypes.IamModule'), type_tuple)
        self.assertNotIsInstance(strimp.get_class('tests.typeutils.sometypes.IamModuleConst'), type_tuple)
        self.assertIsInstance(strimp.get_class('tests.typeutils.sometypes.IamType'), type_tuple)
        self.assertIsInstance(strimp.get_class('tests.typeutils.sometypes.IamClass'), type_tuple)
        self.assertIsInstance(strimp.get_class('tests.typeutils.sometypes.IamCallableClass'), type_tuple)
        self.assertNotIsInstance(strimp.get_class('tests.typeutils.sometypes.IamInstance'), type_tuple)
        self.assertNotIsInstance(strimp.get_class('tests.typeutils.sometypes.IamObject'), type_tuple)
        self.assertNotIsInstance(strimp.get_class('tests.typeutils.sometypes.IamCallableObject'), type_tuple)
        self.assertNotIsInstance(strimp.get_class('tests.typeutils.sometypes.IamLambda'), type_tuple)
        self.assertNotIsInstance(strimp.get_class('tests.typeutils.sometypes.IamFunction'), type_tuple)
        self.assertNotIsInstance(strimp.get_class('tests.typeutils.sometypes.IamEmptyFunction'), type_tuple)
        self.assertNotIsInstance(strimp.get_class('tests.typeutils.sometypes.IamArgsFunction'), type_tuple)
        self.assertNotIsInstance(strimp.get_class('tests.typeutils.sometypes.IamKwArgsFunction'), type_tuple)
        self.assertNotIsInstance(strimp.get_class('tests.typeutils.sometypes.IamStaticMethFromType'), type_tuple)
        self.assertNotIsInstance(strimp.get_class('tests.typeutils.sometypes.IamClassMethFromType'), type_tuple)
        self.assertNotIsInstance(strimp.get_class('tests.typeutils.sometypes.IamMethFromType'), type_tuple)
        self.assertNotIsInstance(strimp.get_class('tests.typeutils.sometypes.IamStaticMethFromClass'), type_tuple)
        self.assertNotIsInstance(strimp.get_class('tests.typeutils.sometypes.IamClassMethFromClass'), type_tuple)
        self.assertNotIsInstance(strimp.get_class('tests.typeutils.sometypes.IamMethFromClass'), type_tuple)
        self.assertNotIsInstance(strimp.get_class('tests.typeutils.sometypes.IamMethFromClass'), type_tuple)

    def test_get_callable(self):
        type_tuple = (types.FunctionType, types.MethodType, type)

        self.assertNotIsInstance(strimp.get_callable('tests.typeutils.sometypes.IamModule'), type_tuple)
        self.assertNotIsInstance(strimp.get_callable('tests.typeutils.sometypes.IamModuleConst'), type_tuple)
        self.assertNotIsInstance(strimp.get_callable('tests.typeutils.sometypes.IamType'), type_tuple)
        self.assertNotIsInstance(strimp.get_callable('tests.typeutils.sometypes.IamClass'), type_tuple)
        self.assertIsInstance(strimp.get_callable('tests.typeutils.sometypes.IamCallableClass'), type_tuple)
        self.assertNotIsInstance(strimp.get_callable('tests.typeutils.sometypes.IamInstance'), type_tuple)
        self.assertNotIsInstance(strimp.get_callable('tests.typeutils.sometypes.IamObject'), type_tuple)

        callable_dude = strimp.get_callable('tests.typeutils.sometypes.IamCallableObject')
        self.assertIsNotNone(callable_dude)

        self.assertIsInstance(strimp.get_callable('tests.typeutils.sometypes.IamLambda'), type_tuple)
        self.assertIsInstance(strimp.get_callable('tests.typeutils.sometypes.IamFunction'), type_tuple)
        self.assertIsInstance(strimp.get_callable('tests.typeutils.sometypes.IamEmptyFunction'), type_tuple)
        self.assertIsInstance(strimp.get_callable('tests.typeutils.sometypes.IamArgsFunction'), type_tuple)
        self.assertIsInstance(strimp.get_callable('tests.typeutils.sometypes.IamKwArgsFunction'), type_tuple)
        self.assertIsInstance(strimp.get_callable('tests.typeutils.sometypes.IamStaticMethFromType'), type_tuple)
        self.assertIsInstance(strimp.get_callable('tests.typeutils.sometypes.IamClassMethFromType'), type_tuple)
        self.assertIsInstance(strimp.get_callable('tests.typeutils.sometypes.IamMethFromType'), type_tuple)
        self.assertIsInstance(strimp.get_callable('tests.typeutils.sometypes.IamStaticMethFromClass'), type_tuple)
        self.assertIsInstance(strimp.get_callable('tests.typeutils.sometypes.IamClassMethFromClass'), type_tuple)
        self.assertIsInstance(strimp.get_callable('tests.typeutils.sometypes.IamMethFromClass'), type_tuple)

    def test_get_methfunc(self):
        self.assertNotIsInstance(strimp.get_methfunc('tests.typeutils.sometypes.IamModule'), (types.FunctionType, types.MethodType))
        self.assertNotIsInstance(strimp.get_methfunc('tests.typeutils.sometypes.IamModuleConst'), (types.FunctionType, types.MethodType))
        self.assertNotIsInstance(strimp.get_methfunc('tests.typeutils.sometypes.IamType'), (types.FunctionType, types.MethodType))
        self.assertNotIsInstance(strimp.get_methfunc('tests.typeutils.sometypes.IamClass'), (types.FunctionType, types.MethodType))
        self.assertNotIsInstance(strimp.get_methfunc('tests.typeutils.sometypes.IamCallableClass'), (types.FunctionType, types.MethodType))
        self.assertNotIsInstance(strimp.get_methfunc('tests.typeutils.sometypes.IamInstance'), (types.FunctionType, types.MethodType))
        self.assertNotIsInstance(strimp.get_methfunc('tests.typeutils.sometypes.IamObject'), (types.FunctionType, types.MethodType))
        self.assertNotIsInstance(strimp.get_methfunc('tests.typeutils.sometypes.IamCallableObject'), (types.FunctionType, types.MethodType))
        self.assertIsInstance(strimp.get_methfunc('tests.typeutils.sometypes.IamLambda'), (types.FunctionType, types.MethodType))
        self.assertIsInstance(strimp.get_methfunc('tests.typeutils.sometypes.IamFunction'), (types.FunctionType, types.MethodType))
        self.assertIsInstance(strimp.get_methfunc('tests.typeutils.sometypes.IamEmptyFunction'), (types.FunctionType, types.MethodType))
        self.assertIsInstance(strimp.get_methfunc('tests.typeutils.sometypes.IamArgsFunction'), (types.FunctionType, types.MethodType))
        self.assertIsInstance(strimp.get_methfunc('tests.typeutils.sometypes.IamKwArgsFunction'), (types.FunctionType, types.MethodType))
        self.assertIsInstance(strimp.get_methfunc('tests.typeutils.sometypes.IamStaticMethFromType'), (types.FunctionType, types.MethodType))
        self.assertIsInstance(strimp.get_methfunc('tests.typeutils.sometypes.IamClassMethFromType'), (types.FunctionType, types.MethodType))
        self.assertIsInstance(strimp.get_methfunc('tests.typeutils.sometypes.IamMethFromType'), (types.FunctionType, types.MethodType))
        self.assertIsInstance(strimp.get_methfunc('tests.typeutils.sometypes.IamStaticMethFromClass'), (types.FunctionType, types.MethodType))
        self.assertIsInstance(strimp.get_methfunc('tests.typeutils.sometypes.IamClassMethFromClass'), (types.FunctionType, types.MethodType))
        self.assertIsInstance(strimp.get_methfunc('tests.typeutils.sometypes.IamMethFromClass'), (types.FunctionType, types.MethodType))

    def get_function(self):
        self.assertNotIsInstance(strimp.get_function('tests.typeutils.sometypes.IamModule'), types.FunctionType)
        self.assertNotIsInstance(strimp.get_function('tests.typeutils.sometypes.IamModuleConst'), types.FunctionType)
        self.assertNotIsInstance(strimp.get_function('tests.typeutils.sometypes.IamType'), types.FunctionType)
        self.assertNotIsInstance(strimp.get_function('tests.typeutils.sometypes.IamClass'), types.FunctionType)
        self.assertNotIsInstance(strimp.get_function('tests.typeutils.sometypes.IamCallableClass'), types.FunctionType)
        self.assertNotIsInstance(strimp.get_function('tests.typeutils.sometypes.IamInstance'), types.FunctionType)
        self.assertNotIsInstance(strimp.get_function('tests.typeutils.sometypes.IamObject'), types.FunctionType)
        self.assertNotIsInstance(strimp.get_function('tests.typeutils.sometypes.IamCallableObject'), types.FunctionType)
        self.assertIsInstance(strimp.get_function('tests.typeutils.sometypes.IamLambda'), types.FunctionType)
        self.assertIsInstance(strimp.get_function('tests.typeutils.sometypes.IamFunction'), types.FunctionType)
        self.assertIsInstance(strimp.get_function('tests.typeutils.sometypes.IamEmptyFunction'), types.FunctionType)
        self.assertIsInstance(strimp.get_function('tests.typeutils.sometypes.IamArgsFunction'), types.FunctionType)
        self.assertIsInstance(strimp.get_function('tests.typeutils.sometypes.IamKwArgsFunction'), types.FunctionType)
        self.assertIsInstance(strimp.get_function('tests.typeutils.sometypes.IamStaticMethFromType'), types.FunctionType)
        self.assertNotIsInstance(strimp.get_function('tests.typeutils.sometypes.IamClassMethFromType'), types.FunctionType)
        self.assertNotIsInstance(strimp.get_function('tests.typeutils.sometypes.IamMethFromType'), types.FunctionType)
        self.assertIsInstance(strimp.get_function('tests.typeutils.sometypes.IamStaticMethFromClass'), types.FunctionType)
        self.assertNotIsInstance(strimp.get_function('tests.typeutils.sometypes.IamClassMethFromClass'), types.FunctionType)
        self.assertNotIsInstance(strimp.get_function('tests.typeutils.sometypes.IamMethFromClass'), types.FunctionType)
