import unittest

from ccptools.legacyapi.typeutils import insp
from tests.typeutils import sometypes
import decimal
import datetime
from ccptools.legacyapi.typeutils import empty


class InspTests(unittest.TestCase):
    def test_is_methfunc(self):
        self.assertFalse(insp.is_methfunc(sometypes.IamModule))
        self.assertFalse(insp.is_methfunc(sometypes.IamModuleConst))
        self.assertFalse(insp.is_methfunc(sometypes.IamType))
        self.assertFalse(insp.is_methfunc(sometypes.IamType.IamClassConst))
        self.assertFalse(insp.is_methfunc(sometypes.IamType.IamProp))
        self.assertTrue(insp.is_methfunc(sometypes.IamType.IamStaticMeth))
        self.assertTrue(insp.is_methfunc(sometypes.IamType.IamClassMeth))
        self.assertTrue(insp.is_methfunc(sometypes.IamType.IamMeth))
        self.assertFalse(insp.is_methfunc(sometypes.IamClass))
        self.assertFalse(insp.is_methfunc(sometypes.IamClass.IamClassConst))
        self.assertFalse(insp.is_methfunc(sometypes.IamClass.IamProp))
        self.assertTrue(insp.is_methfunc(sometypes.IamClass.IamStaticMeth))
        self.assertTrue(insp.is_methfunc(sometypes.IamClass.IamClassMeth))
        self.assertTrue(insp.is_methfunc(sometypes.IamClass.IamMeth))
        self.assertFalse(insp.is_methfunc(sometypes.IamCallableClass))
        self.assertTrue(insp.is_methfunc(sometypes.IamCallableClass.__call__))
        self.assertFalse(insp.is_methfunc(sometypes.IamInstance))
        self.assertFalse(insp.is_methfunc(sometypes.IamInstance.IamClassConst))
        self.assertFalse(insp.is_methfunc(sometypes.IamInstance.IamProp))
        self.assertTrue(insp.is_methfunc(sometypes.IamInstance.IamStaticMeth))
        self.assertTrue(insp.is_methfunc(sometypes.IamInstance.IamClassMeth))
        self.assertTrue(insp.is_methfunc(sometypes.IamInstance.IamMeth))
        self.assertFalse(insp.is_methfunc(sometypes.IamObject))
        self.assertFalse(insp.is_methfunc(sometypes.IamObject.IamClassConst))
        self.assertFalse(insp.is_methfunc(sometypes.IamObject.IamProp))
        self.assertTrue(insp.is_methfunc(sometypes.IamObject.IamStaticMeth))
        self.assertTrue(insp.is_methfunc(sometypes.IamObject.IamClassMeth))
        self.assertTrue(insp.is_methfunc(sometypes.IamObject.IamMeth))
        self.assertFalse(insp.is_methfunc(sometypes.IamCallableObject))
        self.assertTrue(insp.is_methfunc(sometypes.IamCallableObject.__call__))
        self.assertTrue(insp.is_methfunc(sometypes.IamLambda))
        self.assertTrue(insp.is_methfunc(sometypes.IamFunction))
        self.assertTrue(insp.is_methfunc(sometypes.IamEmptyFunction))
        self.assertTrue(insp.is_methfunc(sometypes.IamArgsFunction))
        self.assertTrue(insp.is_methfunc(sometypes.IamKwArgsFunction))

    def test_is_callable(self):
        self.assertFalse(insp.is_callable(sometypes.IamModule))
        self.assertFalse(insp.is_callable(sometypes.IamModuleConst))
        self.assertFalse(insp.is_callable(sometypes.IamType))
        self.assertFalse(insp.is_callable(sometypes.IamType.IamClassConst))
        self.assertFalse(insp.is_callable(sometypes.IamType.IamProp))
        self.assertTrue(insp.is_callable(sometypes.IamType.IamStaticMeth))
        self.assertTrue(insp.is_callable(sometypes.IamType.IamClassMeth))
        self.assertTrue(insp.is_callable(sometypes.IamType.IamMeth))
        self.assertFalse(insp.is_callable(sometypes.IamClass))
        self.assertFalse(insp.is_callable(sometypes.IamClass.IamClassConst))
        self.assertFalse(insp.is_callable(sometypes.IamClass.IamProp))
        self.assertTrue(insp.is_callable(sometypes.IamClass.IamStaticMeth))
        self.assertTrue(insp.is_callable(sometypes.IamClass.IamClassMeth))
        self.assertTrue(insp.is_callable(sometypes.IamClass.IamMeth))
        self.assertTrue(insp.is_callable(sometypes.IamCallableClass))  # Different! :D
        self.assertTrue(insp.is_callable(sometypes.IamCallableClass.__call__))
        self.assertFalse(insp.is_callable(sometypes.IamInstance))
        self.assertFalse(insp.is_callable(sometypes.IamInstance.IamClassConst))
        self.assertFalse(insp.is_callable(sometypes.IamInstance.IamProp))
        self.assertTrue(insp.is_callable(sometypes.IamInstance.IamStaticMeth))
        self.assertTrue(insp.is_callable(sometypes.IamInstance.IamClassMeth))
        self.assertTrue(insp.is_callable(sometypes.IamInstance.IamMeth))
        self.assertFalse(insp.is_callable(sometypes.IamObject))
        self.assertFalse(insp.is_callable(sometypes.IamObject.IamClassConst))
        self.assertFalse(insp.is_callable(sometypes.IamObject.IamProp))
        self.assertTrue(insp.is_callable(sometypes.IamObject.IamStaticMeth))
        self.assertTrue(insp.is_callable(sometypes.IamObject.IamClassMeth))
        self.assertTrue(insp.is_callable(sometypes.IamObject.IamMeth))
        self.assertTrue(insp.is_callable(sometypes.IamCallableObject))  # Different! :D
        self.assertTrue(insp.is_callable(sometypes.IamCallableObject.__call__))
        self.assertTrue(insp.is_callable(sometypes.IamLambda))
        self.assertTrue(insp.is_callable(sometypes.IamFunction))
        self.assertTrue(insp.is_callable(sometypes.IamEmptyFunction))
        self.assertTrue(insp.is_callable(sometypes.IamArgsFunction))
        self.assertTrue(insp.is_callable(sometypes.IamKwArgsFunction))

    def test_get_argspec(self):
        self.assertIsNone(insp.get_argspec(sometypes.IamModule))
        self.assertIsNone(insp.get_argspec(sometypes.IamModuleConst))
        self.assertIsNone(insp.get_argspec(sometypes.IamType))
        self.assertIsNone(insp.get_argspec(sometypes.IamType.IamClassConst))
        self.assertIsNone(insp.get_argspec(sometypes.IamType.IamProp))

        self.assertIsNotNone(insp.get_argspec(sometypes.IamType.IamStaticMeth))
        self.assertIsNotNone(insp.get_argspec(sometypes.IamType.IamClassMeth))
        self.assertIsNotNone(insp.get_argspec(sometypes.IamType.IamMeth))

        self.assertIsNone(insp.get_argspec(sometypes.IamClass))
        self.assertIsNone(insp.get_argspec(sometypes.IamClass.IamClassConst))
        self.assertIsNone(insp.get_argspec(sometypes.IamClass.IamProp))

        self.assertIsNotNone(insp.get_argspec(sometypes.IamClass.IamStaticMeth))
        self.assertIsNotNone(insp.get_argspec(sometypes.IamClass.IamClassMeth))
        self.assertIsNotNone(insp.get_argspec(sometypes.IamClass.IamMeth))
        self.assertIsNotNone(insp.get_argspec(sometypes.IamCallableClass))
        self.assertIsNotNone(insp.get_argspec(sometypes.IamCallableClass.__call__))

        self.assertIsNone(insp.get_argspec(sometypes.IamInstance))
        self.assertIsNone(insp.get_argspec(sometypes.IamInstance.IamClassConst))
        self.assertIsNone(insp.get_argspec(sometypes.IamInstance.IamProp))

        self.assertIsNotNone(insp.get_argspec(sometypes.IamInstance.IamStaticMeth))
        self.assertIsNotNone(insp.get_argspec(sometypes.IamInstance.IamClassMeth))
        self.assertIsNotNone(insp.get_argspec(sometypes.IamInstance.IamMeth))

        self.assertIsNone(insp.get_argspec(sometypes.IamObject))
        self.assertIsNone(insp.get_argspec(sometypes.IamObject.IamClassConst))
        self.assertIsNone(insp.get_argspec(sometypes.IamObject.IamProp))

        self.assertIsNotNone(insp.get_argspec(sometypes.IamObject.IamStaticMeth))
        self.assertIsNotNone(insp.get_argspec(sometypes.IamObject.IamClassMeth))
        self.assertIsNotNone(insp.get_argspec(sometypes.IamObject.IamMeth))
        self.assertIsNotNone(insp.get_argspec(sometypes.IamCallableObject))
        self.assertIsNotNone(insp.get_argspec(sometypes.IamCallableObject.__call__))
        self.assertIsNotNone(insp.get_argspec(sometypes.IamLambda))
        self.assertIsNotNone(insp.get_argspec(sometypes.IamFunction))
        self.assertIsNotNone(insp.get_argspec(sometypes.IamEmptyFunction))
        self.assertIsNotNone(insp.get_argspec(sometypes.IamArgsFunction))
        self.assertIsNotNone(insp.get_argspec(sometypes.IamKwArgsFunction))

    def test_fits_callable_empty(self):
        self.assertTrue(insp.fits_callable_profile(sometypes.IamType.IamStaticMeth))
        self.assertTrue(insp.fits_callable_profile(sometypes.IamType.IamClassMeth))
        self.assertTrue(insp.fits_callable_profile(sometypes.IamType.IamMeth))

        self.assertTrue(insp.fits_callable_profile(sometypes.IamClass.IamStaticMeth))
        self.assertTrue(insp.fits_callable_profile(sometypes.IamClass.IamClassMeth))
        self.assertTrue(insp.fits_callable_profile(sometypes.IamClass.IamMeth))

        self.assertTrue(insp.fits_callable_profile(sometypes.IamCallableClass))
        self.assertTrue(insp.fits_callable_profile(sometypes.IamCallableClass.__call__))

        self.assertTrue(insp.fits_callable_profile(sometypes.IamInstance.IamStaticMeth))
        self.assertTrue(insp.fits_callable_profile(sometypes.IamInstance.IamClassMeth))
        self.assertTrue(insp.fits_callable_profile(sometypes.IamInstance.IamMeth))

        self.assertTrue(insp.fits_callable_profile(sometypes.IamObject.IamStaticMeth))
        self.assertTrue(insp.fits_callable_profile(sometypes.IamObject.IamClassMeth))
        self.assertTrue(insp.fits_callable_profile(sometypes.IamObject.IamMeth))

        self.assertTrue(insp.fits_callable_profile(sometypes.IamCallableObject))
        self.assertTrue(insp.fits_callable_profile(sometypes.IamCallableObject))

        self.assertTrue(insp.fits_callable_profile(sometypes.IamLambda))
        self.assertTrue(insp.fits_callable_profile(sometypes.IamFunction))
        self.assertTrue(insp.fits_callable_profile(sometypes.IamEmptyFunction))
        self.assertTrue(insp.fits_callable_profile(sometypes.IamArgsFunction))
        self.assertTrue(insp.fits_callable_profile(sometypes.IamKwArgsFunction))

    def test_fits_callable_profile(self):
        self.assertTrue(insp.fits_callable_profile(sometypes.IamType.IamStaticMeth, required_arg_count=0, total_arg_count=0, default_count=0, has_varargs=False, has_kwargs=False, arg_names=None))
        self.assertTrue(insp.fits_callable_profile(sometypes.IamType.IamClassMeth, required_arg_count=1, total_arg_count=1, default_count=0, has_varargs=False, has_kwargs=False, arg_names=['cls']))
        self.assertTrue(insp.fits_callable_profile(sometypes.IamType.IamClassMeth, required_arg_count=1, total_arg_count=1, default_count=0, has_varargs=False, has_kwargs=False, arg_names=('cls',)))
        self.assertTrue(insp.fits_callable_profile(sometypes.IamType.IamMeth, required_arg_count=1, total_arg_count=1, default_count=0, has_varargs=False, has_kwargs=False, arg_names=['self']))
        self.assertTrue(insp.fits_callable_profile(sometypes.IamType.IamMeth, required_arg_count=1, total_arg_count=1, default_count=0, has_varargs=False, has_kwargs=False, arg_names=('self',)))

        self.assertTrue(insp.fits_callable_profile(sometypes.IamClass.IamStaticMeth, required_arg_count=0, total_arg_count=0, default_count=0, has_varargs=False, has_kwargs=False, arg_names=None))
        self.assertTrue(insp.fits_callable_profile(sometypes.IamClass.IamClassMeth, required_arg_count=1, total_arg_count=1, default_count=0, has_varargs=False, has_kwargs=False, arg_names=['cls']))
        self.assertTrue(insp.fits_callable_profile(sometypes.IamClass.IamClassMeth, required_arg_count=1, total_arg_count=1, default_count=0, has_varargs=False, has_kwargs=False, arg_names=('cls',)))
        self.assertTrue(insp.fits_callable_profile(sometypes.IamClass.IamMeth, required_arg_count=1, total_arg_count=1, default_count=0, has_varargs=False, has_kwargs=False, arg_names=['self']))
        self.assertTrue(insp.fits_callable_profile(sometypes.IamClass.IamMeth, required_arg_count=1, total_arg_count=1, default_count=0, has_varargs=False, has_kwargs=False, arg_names=('self',)))

        self.assertTrue(insp.fits_callable_profile(sometypes.IamCallableClass, required_arg_count=3, total_arg_count=3, default_count=0, has_varargs=True, has_kwargs=True, arg_names=['self', 'foo', 'bar']))
        self.assertTrue(insp.fits_callable_profile(sometypes.IamCallableClass, required_arg_count=3, total_arg_count=3, default_count=0, has_varargs='args', has_kwargs='kwargs', arg_names=['bar', 'foo']))
        self.assertTrue(insp.fits_callable_profile(sometypes.IamCallableClass, required_arg_count=3, total_arg_count=3, default_count=0, has_varargs=True, has_kwargs=True, arg_names=('self', 'foo', 'bar')))
        self.assertTrue(insp.fits_callable_profile(sometypes.IamCallableClass, required_arg_count=3, total_arg_count=3, default_count=0, has_varargs='args', has_kwargs='kwargs', arg_names=('*', 'foo', 'bar')))
        self.assertTrue(insp.fits_callable_profile(sometypes.IamCallableClass.__call__, required_arg_count=3, total_arg_count=3, default_count=0, has_varargs=True, has_kwargs=True, arg_names=['self', 'foo', 'bar']))
        self.assertTrue(insp.fits_callable_profile(sometypes.IamCallableClass.__call__, required_arg_count=3, total_arg_count=3, default_count=0, has_varargs='args', has_kwargs='kwargs', arg_names=['bar', 'foo']))
        self.assertTrue(insp.fits_callable_profile(sometypes.IamCallableClass.__call__, required_arg_count=3, total_arg_count=3, default_count=0, has_varargs=True, has_kwargs=True, arg_names=('self', 'foo', 'bar')))
        self.assertTrue(insp.fits_callable_profile(sometypes.IamCallableClass.__call__, required_arg_count=3, total_arg_count=3, default_count=0, has_varargs='args', has_kwargs='kwargs', arg_names=('*', 'foo', 'bar')))

        self.assertTrue(insp.fits_callable_profile(sometypes.IamInstance.IamStaticMeth, required_arg_count=0, total_arg_count=0, default_count=0, has_varargs=False, has_kwargs=False, arg_names=None))
        self.assertTrue(insp.fits_callable_profile(sometypes.IamInstance.IamClassMeth, required_arg_count=1, total_arg_count=1, default_count=0, has_varargs=False, has_kwargs=False, arg_names=['cls']))
        self.assertTrue(insp.fits_callable_profile(sometypes.IamInstance.IamClassMeth, required_arg_count=1, total_arg_count=1, default_count=0, has_varargs=False, has_kwargs=False, arg_names=('cls',)))
        self.assertTrue(insp.fits_callable_profile(sometypes.IamInstance.IamMeth, required_arg_count=1, total_arg_count=1, default_count=0, has_varargs=False, has_kwargs=False, arg_names=['self']))
        self.assertTrue(insp.fits_callable_profile(sometypes.IamInstance.IamMeth, required_arg_count=1, total_arg_count=1, default_count=0, has_varargs=False, has_kwargs=False, arg_names=('self',)))

        self.assertTrue(insp.fits_callable_profile(sometypes.IamObject.IamStaticMeth, required_arg_count=0, total_arg_count=0, default_count=0, has_varargs=False, has_kwargs=False, arg_names=None))
        self.assertTrue(insp.fits_callable_profile(sometypes.IamObject.IamClassMeth, required_arg_count=1, total_arg_count=1, default_count=0, has_varargs=False, has_kwargs=False, arg_names=['cls']))
        self.assertTrue(insp.fits_callable_profile(sometypes.IamObject.IamClassMeth, required_arg_count=1, total_arg_count=1, default_count=0, has_varargs=False, has_kwargs=False, arg_names=('cls',)))
        self.assertTrue(insp.fits_callable_profile(sometypes.IamObject.IamMeth, required_arg_count=1, total_arg_count=1, default_count=0, has_varargs=False, has_kwargs=False, arg_names=['self']))
        self.assertTrue(insp.fits_callable_profile(sometypes.IamObject.IamMeth, required_arg_count=1, total_arg_count=1, default_count=0, has_varargs=False, has_kwargs=False, arg_names=('self',)))

        self.assertTrue(insp.fits_callable_profile(sometypes.IamCallableObject, required_arg_count=3, total_arg_count=3, default_count=0, has_varargs=True, has_kwargs=True, arg_names=['self', 'foo', 'bar']))
        self.assertTrue(insp.fits_callable_profile(sometypes.IamCallableObject, required_arg_count=3, total_arg_count=3, default_count=0, has_varargs='args', has_kwargs='kwargs', arg_names=['bar', 'foo']))
        self.assertTrue(insp.fits_callable_profile(sometypes.IamCallableObject, required_arg_count=3, total_arg_count=3, default_count=0, has_varargs=True, has_kwargs=True, arg_names=('self', 'foo', 'bar')))
        self.assertTrue(insp.fits_callable_profile(sometypes.IamCallableObject, required_arg_count=3, total_arg_count=3, default_count=0, has_varargs='args', has_kwargs='kwargs', arg_names=('*', 'foo', 'bar')))
        self.assertTrue(insp.fits_callable_profile(sometypes.IamCallableObject.__call__, required_arg_count=3, total_arg_count=3, default_count=0, has_varargs=True, has_kwargs=True, arg_names=['self', 'foo', 'bar']))
        self.assertTrue(insp.fits_callable_profile(sometypes.IamCallableObject.__call__, required_arg_count=3, total_arg_count=3, default_count=0, has_varargs='args', has_kwargs='kwargs', arg_names=['bar', 'foo']))
        self.assertTrue(insp.fits_callable_profile(sometypes.IamCallableObject.__call__, required_arg_count=3, total_arg_count=3, default_count=0, has_varargs=True, has_kwargs=True, arg_names=('self', 'foo', 'bar')))
        self.assertTrue(insp.fits_callable_profile(sometypes.IamCallableObject.__call__, required_arg_count=3, total_arg_count=3, default_count=0, has_varargs='args', has_kwargs='kwargs', arg_names=('*', 'foo', 'bar')))

        self.assertTrue(insp.fits_callable_profile(sometypes.IamLambda, required_arg_count=1, total_arg_count=1, default_count=0, has_varargs=False, has_kwargs=False, arg_names=['x']))
        self.assertTrue(insp.fits_callable_profile(sometypes.IamLambda, required_arg_count=1, total_arg_count=1, default_count=0, has_varargs=False, has_kwargs=False, arg_names=('x',)))
        self.assertTrue(insp.fits_callable_profile(sometypes.IamFunction, required_arg_count=3, total_arg_count=5, default_count=2, has_varargs=True, has_kwargs=True, arg_names=['a', 'b', 'c', 'd', 'f']))
        self.assertTrue(insp.fits_callable_profile(sometypes.IamFunction, required_arg_count=3, total_arg_count=5, default_count=2, has_varargs='vargs', has_kwargs='vkwargs', arg_names=['c', 'a', 'd', 'f']))
        self.assertTrue(insp.fits_callable_profile(sometypes.IamFunction, required_arg_count=3, total_arg_count=5, default_count=2, has_varargs=True, has_kwargs=True, arg_names=('a', 'b', 'c', 'd', 'f')))
        self.assertTrue(insp.fits_callable_profile(sometypes.IamFunction, required_arg_count=3, total_arg_count=5, default_count=2, has_varargs='vargs', has_kwargs='vkwargs', arg_names=('a', '*', '*', 'd')))
        self.assertTrue(insp.fits_callable_profile(sometypes.IamFunction, required_arg_count=(3, 3), total_arg_count=(4, 6), has_varargs='vargs', has_kwargs='vkwargs', arg_names=('a', '*', '*', 'd'), raise_error=True))
        self.assertTrue(insp.fits_callable_profile(sometypes.IamEmptyFunction, required_arg_count=0, total_arg_count=0, default_count=0, has_varargs=False, has_kwargs=False, arg_names=None))
        self.assertTrue(insp.fits_callable_profile(sometypes.IamArgsFunction, required_arg_count=0, total_arg_count=0, default_count=0, has_varargs=True, has_kwargs=False, arg_names=None))
        self.assertTrue(insp.fits_callable_profile(sometypes.IamArgsFunction, required_arg_count=0, total_arg_count=0, default_count=0, has_varargs='my_args', has_kwargs=False, arg_names=None))
        self.assertTrue(insp.fits_callable_profile(sometypes.IamKwArgsFunction, required_arg_count=0, total_arg_count=0, default_count=0, has_varargs=False, has_kwargs=True, arg_names=None))
        self.assertTrue(insp.fits_callable_profile(sometypes.IamKwArgsFunction, required_arg_count=0, total_arg_count=0, default_count=0, has_varargs=False, has_kwargs='my_kwargs', arg_names=None))

    def test_fits_callable_profile_fail(self):
        self.assertFalse(insp.fits_callable_profile(sometypes.IamType.IamStaticMeth, required_arg_count=1))
        self.assertFalse(insp.fits_callable_profile(sometypes.IamType.IamClassMeth, required_arg_count=1, total_arg_count=1, has_varargs=False, has_kwargs=False, arg_names=['self']))
        self.assertFalse(insp.fits_callable_profile(sometypes.IamType.IamClassMeth, required_arg_count=1, total_arg_count=1, has_varargs=False, has_kwargs=True, arg_names=('cls',)))
        self.assertFalse(insp.fits_callable_profile(sometypes.IamType.IamMeth, required_arg_count=1, total_arg_count=1, default_count=1, has_varargs=False, has_kwargs=False, arg_names=('self',)))
        self.assertFalse(insp.fits_callable_profile(sometypes.IamClass.IamStaticMeth, required_arg_count=0, total_arg_count=0, default_count=0, has_varargs=False, has_kwargs=False, arg_names=('self',)))
        self.assertFalse(insp.fits_callable_profile(sometypes.IamClass.IamClassMeth, required_arg_count=(2, 4), total_arg_count=1, default_count=0, has_varargs=False, has_kwargs=False, arg_names=['cls']))
        self.assertFalse(insp.fits_callable_profile(sometypes.IamClass.IamMeth, required_arg_count=1, total_arg_count=1, default_count=0, has_varargs='args', has_kwargs=False, arg_names=['self']))
        self.assertFalse(insp.fits_callable_profile(sometypes.IamCallableObject, required_arg_count=3, total_arg_count=3, default_count=1, has_varargs=True, has_kwargs=True, arg_names=['self', 'foo', 'bar']))
        self.assertFalse(insp.fits_callable_profile(sometypes.IamCallableObject.__call__, required_arg_count=3, total_arg_count=3, default_count=0, has_varargs=True, has_kwargs=True, arg_names=('self', 'bar', 'foo')))
        self.assertFalse(insp.fits_callable_profile(sometypes.IamLambda, required_arg_count=1, total_arg_count=1, default_count=0, arg_names=['y']))
        self.assertFalse(insp.fits_callable_profile(sometypes.IamFunction, required_arg_count=3, total_arg_count=5, default_count=2, has_varargs='args', has_kwargs='kwargs', arg_names=['c', 'a', 'd', 'f']))
        self.assertFalse(insp.fits_callable_profile(sometypes.IamEmptyFunction, required_arg_count=0, total_arg_count=0, default_count=0, has_varargs=False, has_kwargs=False, arg_names=['x']))
        self.assertFalse(insp.fits_callable_profile(sometypes.IamArgsFunction, required_arg_count=0, total_arg_count=0, default_count=0, has_varargs=False, has_kwargs=False, arg_names=None))
        self.assertFalse(insp.fits_callable_profile(sometypes.IamKwArgsFunction, required_arg_count=0, total_arg_count=0, default_count=0, has_varargs=False, has_kwargs=False, arg_names=None))

    def test_get_type_name(self):
        self.assertEqual('bytes', insp.get_any_name(bytes))
        self.assertEqual('str', insp.get_any_name(str))
        self.assertEqual('int', insp.get_any_name(int))
        self.assertEqual('float', insp.get_any_name(float))
        self.assertEqual('bool', insp.get_any_name(bool))
        self.assertEqual('None', insp.get_any_name(None))

        self.assertEqual('decimal.Decimal', insp.get_any_name(decimal.Decimal))
        self.assertEqual('datetime.datetime', insp.get_any_name(datetime.datetime))
        self.assertEqual('datetime.time', insp.get_any_name(datetime.time))
        self.assertEqual('datetime.timedelta', insp.get_any_name(datetime.timedelta))

        self.assertEqual('bytes', insp.get_any_name(b'foo'))
        self.assertEqual('str', insp.get_any_name('foo'))
        self.assertEqual('int', insp.get_any_name(7))
        self.assertEqual('bool', insp.get_any_name(True))

        self.assertEqual('decimal.Decimal', insp.get_any_name(decimal.Decimal('14.2')))
        self.assertEqual('datetime.datetime', insp.get_any_name(datetime.datetime.now()))
        self.assertEqual('datetime.time', insp.get_any_name(datetime.time()))
        self.assertEqual('datetime.timedelta', insp.get_any_name(datetime.timedelta(hours=-7)))

        self.assertEqual('datetime', insp.get_any_name(datetime))

        self.assertEqual('tests.typeutils.sometypes.IamModule', insp.get_any_name(sometypes.IamModule))

        self.assertEqual('str', insp.get_any_name(sometypes.IamModuleConst))
        self.assertEqual('tests.typeutils.sometypes.IamType', insp.get_any_name(sometypes.IamType))

        self.assertEqual('str', insp.get_any_name(sometypes.IamType.IamClassConst))

        self.assertEqual('tests.typeutils.sometypes.IamType.IamMeth', insp.get_any_name(sometypes.IamType.IamMeth))
        self.assertEqual('tests.typeutils.sometypes.IamType.IamProp', insp.get_any_name(sometypes.IamType.IamProp))
        self.assertEqual('tests.typeutils.sometypes.IamType.IamStaticMeth', insp.get_any_name(sometypes.IamType.IamStaticMeth))
        self.assertEqual('tests.typeutils.sometypes.IamType.IamClassMeth', insp.get_any_name(sometypes.IamType.IamClassMeth))
        self.assertEqual('tests.typeutils.sometypes.IamClass', insp.get_any_name(sometypes.IamClass))
        self.assertEqual('str', insp.get_any_name(sometypes.IamClass.IamClassConst))
        self.assertEqual('tests.typeutils.sometypes.IamClass.IamProp', insp.get_any_name(sometypes.IamClass.IamProp))
        self.assertEqual('tests.typeutils.sometypes.IamClass.IamStaticMeth', insp.get_any_name(sometypes.IamClass.IamStaticMeth))
        self.assertEqual('tests.typeutils.sometypes.IamClass.IamClassMeth', insp.get_any_name(sometypes.IamClass.IamClassMeth))
        self.assertEqual('tests.typeutils.sometypes.IamClass.IamMeth', insp.get_any_name(sometypes.IamClass.IamMeth))
        self.assertEqual('tests.typeutils.sometypes.IamCallableClass', insp.get_any_name(sometypes.IamCallableClass))
        self.assertEqual('tests.typeutils.sometypes.IamCallableClass.__call__', insp.get_any_name(sometypes.IamCallableClass.__call__))
        self.assertEqual('tests.typeutils.sometypes.IamType', insp.get_any_name(sometypes.IamInstance))
        self.assertEqual('str', insp.get_any_name(sometypes.IamInstance.IamClassConst))
        self.assertEqual('str', insp.get_any_name(sometypes.IamInstance.IamProp))
        self.assertEqual('tests.typeutils.sometypes.IamType.IamStaticMeth', insp.get_any_name(sometypes.IamInstance.IamStaticMeth))
        self.assertEqual('tests.typeutils.sometypes.IamType.IamClassMeth', insp.get_any_name(sometypes.IamInstance.IamClassMeth))
        self.assertEqual('tests.typeutils.sometypes.IamType.IamMeth', insp.get_any_name(sometypes.IamInstance.IamMeth))
        self.assertEqual('tests.typeutils.sometypes.IamType', insp.get_any_name(sometypes.IamObject))
        self.assertEqual('str', insp.get_any_name(sometypes.IamObject.IamClassConst))
        self.assertEqual('str', insp.get_any_name(sometypes.IamObject.IamProp))
        self.assertEqual('tests.typeutils.sometypes.IamType.IamStaticMeth', insp.get_any_name(sometypes.IamObject.IamStaticMeth))
        self.assertEqual('tests.typeutils.sometypes.IamType.IamClassMeth', insp.get_any_name(sometypes.IamObject.IamClassMeth))
        self.assertEqual('tests.typeutils.sometypes.IamType.IamMeth', insp.get_any_name(sometypes.IamObject.IamMeth))
        self.assertEqual('tests.typeutils.sometypes.IamCallableClass', insp.get_any_name(sometypes.IamCallableObject))
        self.assertEqual('tests.typeutils.sometypes.IamCallableClass.__call__', insp.get_any_name(sometypes.IamCallableObject.__call__))
        self.assertEqual('tests.typeutils.sometypes.<lambda>', insp.get_any_name(sometypes.IamLambda))
        self.assertEqual('tests.typeutils.sometypes.IamFunction', insp.get_any_name(sometypes.IamFunction))
        self.assertEqual('tests.typeutils.sometypes.IamEmptyFunction', insp.get_any_name(sometypes.IamEmptyFunction))
        self.assertEqual('tests.typeutils.sometypes.IamArgsFunction', insp.get_any_name(sometypes.IamArgsFunction))
        self.assertEqual('tests.typeutils.sometypes.IamKwArgsFunction', insp.get_any_name(sometypes.IamKwArgsFunction))
        self.assertEqual('ccptools.tpu.structs.empty.Empty', insp.get_any_name(empty.Empty))
        self.assertEqual('ccptools.tpu.structs.empty._empty.EmptyDict', insp.get_any_name(empty.EmptyDict))

    def test_get_first_attr(self):
        dt = datetime.datetime(2021, 8, 10, 11, 12, 57)
        dt.isoformat()
        self.assertEqual(dt.month, insp.get_first_attr(dt, ['foo', 'bar', 'month', 'year']))
        self.assertEqual(dt.isoformat, insp.get_first_attr(dt, ['foo', 'bar', 'isoformat', 'year']))

        self.assertEqual(dt.isoformat(), insp.resolve_first(dt, ['foo', 'bar', 'isoformat', 'year']))

        self.assertEqual('', insp.resolve_attr(sometypes.IamObject.IamProp))
        self.assertEqual(None, insp.resolve_attr(sometypes.IamEmptyFunction))
